if (x %% i == 0) {
lights[x] <- ifelse(isTRUE(lights[x]), F, T)
}
}
message(paste0("Round ", i, ":"))
print(lights)
}
}
light_switch(5)
light_switch <- function(n) {
lights <- rep(F, n)
message(paste0("Round 0:"))
print(lights)
for (i in 1:n) {
for (x in seq_along(lights)) {
#browser()
if (x %% i == 0) {
lights[x] <- ifelse(isTRUE(lights[x]), F, T)
}
}
message(paste0("Round ", i, ":"))
print(lights)
}
}
light_switch(5)
light_switch(6)
light_switch(5)
(1*5) %% 5
(2*5) %% 5
(3*5) %% 5
(4*5) %% 5
(5*5) %% 5
5 %% (1*5)
5 %% (2*5)
5 %% (3*5)
5 %% (4*5)
5 %% (5*5)
light_switch(5)
light_switch(6)
6 %% 6
1 %% 6
2 %% 6
3 %% 6
4 %% 6
5 %% 6
6 %% 6
1+6 %% 6
(1+6) %% 6
(2+6) %% 6
(6+6) %% 6
(5+6) %% 6
light_switch(7)
seq_along(lights)
lights <- rep(F, n)
#flip odds twice
lights[1::2]
#flip odds twice
lights[::2]
1 %% 2
2 %% 2
3 %% 2
4 %% 2
5 %% 2
1 %% 1
2 %% 1
3 %% 1
4 %% 1
#flip odds twice
which(lights %% 2 == 0)
#flip odds twice
which(seq_along(lights) %% 2 == 0)
which(seq_along(lights) %% 2 != 0)
which(seq_along(lights-1) %% 2 != 0)
which(seq_along(lights) %% 2 != 0)[-1]
#flip odds twice
which(seq_along(lights) %% 2 == 0)
#flip odds twice
which(seq_along(lights) %% 2 == 0)[-1]
#these will be F
which(seq_along(lights) %% 2 != 0)[-1])
#these will be F
which(seq_along(lights) %% 2 != 0)[-1])
#these will be F
which(seq_along(lights) %% 2 != 0)[-1]
message(paste0("Round 1:"))
print(FALSE)
which(seq_along(lights) %% 2 == 0)[-1]
which(seq_along(lights) %% 2 == 0)
evens <- which(seq_along(lights) %% 2 == 0)
seq_along(evens)
seq_along(evens) + 1
which(seq_along(evens) + 1 %% 2 == 0)
which((seq_along(evens) + 1) %% 2 == 0)
which((seq_along(evens) + 1) %% 2 != 0)
evens[which((seq_along(evens) + 1) %% 2 != 0)]
lights[lights == evens[which((seq_along(evens) + 1) %% 2 != 0)]] <- T
evens[which((seq_along(evens) + 1) %% 2 != 0)]
lights <- 1:n
#flip index 1 once
lights[1] <- T
#flip index 2 twice
lights[2] <- F
lights
lights <- 1:n
evens <- which(seq_along(lights) %% 2 == 0)
evens[which((seq_along(evens) + 1) %% 2 != 0)]
lights[lights == evens[which((seq_along(evens) + 1) %% 2 != 0)]] <- T
as.logical(lights)
lights[lights > 1] <- F
as.logical(lights)
evens <- which(seq_along(lights) %% 2 == 0)
light_switch_v2 <- function(n) {
if (n < 1) {
error('n must be greater >= 1')
} else if (n == 1) {
message(paste0("Round 1:"))
print(TRUE)
} else {
lights <- 1:n
evens <- which(seq_along(lights) %% 2 == 0)
lights[lights == evens[which((seq_along(evens) + 1) %% 2 != 0)]] <- T
lights[lights > 1] <- F
message(paste0("Round ", n, ":"))
print(as.logical(lights))
}
}
light_switch(5)
light_switch_v2(5)
light_switch(1)
light_switch_v2(1)
# create a vector of indices
lights <- 1:n
evens <- which(seq_along(lights) %% 2 == 0)[-1]
evens[which(seq_along(evens) %% 2 != 0)]
lights[lights == evens[which(seq_along(evens) %% 2 != 0)]] <- T
lights[lights > 1] <- F
message(paste0("Round ", n, ":"))
print(as.logical(lights))
light_switch(5)
evens[which(seq_along(evens) %% 2 != 0)]
light_switch_v2 <- function(n) {
if (n < 1) {
error('n must be greater >= 1')
} else {
# create a vector of indices
lights <- 1:n
# identify evens (only the evens - except 2 - and first index will
# convert to TRUE)
# evens <- which(seq_along(lights) %% 2 == 0)[-1] # -1 to drop the value 2
#
# lights[lights == evens[which(seq_along(evens) %% 2 != 0)]] <- T # converts all eve
# lights[lights > 1] <- F # all indices not even beyond 1 convert to F
evens <- which(seq_along(lights) %% 2 == 0)[-1] # -1 to drop the value 2
lights[lights == evens] <- T # converts all evens to TRUE
lights[lights > 1] <- F # all indices not even beyond 1 convert to F
message(paste0("Round ", n, ":"))
print(as.logical(lights))
}
}
light_switch(5)
light_switch_v2(5)
light_switch(1)
light_switch_v2(1)
light_switch(11)
light_switch_v2(11)
light_switch_v2 <- function(n) {
if (n < 1) {
error('n must be greater >= 1')
} else {
# create a vector of indices
lights <- 1:n
# identify evens (only the evens - except 2 - and first index will
# convert to TRUE)
evens <- which(seq_along(lights) %% 2 == 0)[-1] # -1 to drop the value 2
lights[lights == evens[which(seq_along(evens) %% 2 != 0)]] <- T # converts all eve
lights[lights > 1] <- F # all indices not even beyond 1 convert to F
# evens <- which(seq_along(lights) %% 2 == 0)[-1] # -1 to drop the value 2
#
# lights[lights == evens] <- T # converts all evens to TRUE
# lights[lights > 1] <- F # all indices not even beyond 1 convert to F
message(paste0("Round ", n, ":"))
print(as.logical(lights))
}
}
light_switch_v2(11)
light_switch(7)
light_switch(7)
light_switch_v2 <- function(n) {
if (n < 1) {
error('n must be greater >= 1')
} else {
# create a vector of indices
lights <- 1:n
# identify evens (only the evens - except 2 - and first index will
# convert to TRUE)
evens <- which(seq_along(lights) %% 2 == 0)[-1] # -1 to drop the value 2
lights[lights == evens[which(seq_along(evens) %% 2 != 0)]] <- T # converts all eve
lights[lights > 1] <- F # all indices not even beyond 1 convert to F
# evens <- which(seq_along(lights) %% 2 == 0)[-1] # -1 to drop the value 2
#
# lights[lights == evens] <- T # converts all evens to TRUE
# lights[lights > 1] <- F # all indices not even beyond 1 convert to F
message(paste0("Round ", n, ":"))
print(as.logical(lights))
}
}
light_switch_v2 <- function(n) {
if (n < 1) {
error('n must be greater >= 1')
} else {
# create a vector of indices
lights <- 1:n
# identify evens (only the evens - except 2 - and first index will
# convert to TRUE)
evens <- which(seq_along(lights) %% 2 == 0)[-1] # -1 to drop the value 2
lights[lights == evens[which(seq_along(evens) %% 2 != 0)]] <- T # converts all eve
lights[lights > 1] <- F # all indices not even beyond 1 convert to F
# evens <- which(seq_along(lights) %% 2 == 0)[-1] # -1 to drop the value 2
#
# lights[lights == evens] <- T # converts all evens to TRUE
# lights[lights > 1] <- F # all indices not even beyond 1 convert to F
message(paste0("Round ", n, ":"))
print(as.logical(lights))
}
}
light_switch_v2(7)
light_switch(7)
light_switch(7)
light_switch_v2(7)
light_switch(8)
light_switch_v2(8)
n = 8
# create a vector of indices
lights <- 1:n
# identify evens (only the evens - except 2 - and first index will
# convert to TRUE)
evens <- which(seq_along(lights) %% 2 == 0)[-1] # -1 to drop the value 2
lights[lights == evens]
evens
lights[lights %in% evens] <- T # converts all evens to TRUE
lights[lights > 1] <- F # all indices not even beyond 1 convert to F
message(paste0("Round ", n, ":"))
message(paste0("Round ", n, ":"))
print(as.logical(lights))
# create a vector of indices
lights <- 1:n
# identify evens (only the evens - except 2 - and first index will
# convert to TRUE)
# TODO: still needs to skip every other even, and skip if even is the max n
evens <- which(seq_along(lights) %% 2 == 0)[-1] # -1 to drop the value 2
evens[which(seq_along(evens) %% 2 != 0)]
light_switch_v2 <- function(n) {
if (n < 1) {
error('n must be greater >= 1')
} else {
# create a vector of indices
lights <- 1:n
# identify evens (only the evens - except 2 - and first index will
# convert to TRUE)
# TODO: still needs to skip every other even, and skip if even is the max n
evens <- which(seq_along(lights) %% 2 == 0)[-1] # -1 to drop the value 2
lights[lights %in% evens[which(seq_along(evens) %% 2 != 0)]] <- T # converts all eve
lights[lights > 1] <- F # all indices not even beyond 1 convert to F
message(paste0("Round ", n, ":"))
print(as.logical(lights))
}
}
light_switch(5)
light_switch_v2(5)
light_switch(8)
light_switch_v2(8)
light_switch(10)
light_switch_v2(10)
light_switch(11)
light_switch_v2(11)
light_switch(10)
light_switch(11)
light_switch_v2(11)
light_switch(8)
light_switch(8)
light_switch_v2(8)
# create a vector of indices
lights <- 1:n
# identify evens (only the evens - except 2 - and first index will
# convert to TRUE)
# TODO: still needs to skip every other even, and skip if even is the max n
evens <- which(seq_along(lights) %% 2 == 0)[-1] # -1 to drop the value 2
evens
seq_along(lights) / seq_along(lights)
lights[lights / seq_along(lights)]
lights
seq_along(lights) %% 2
seq_along(lights)
odds <- which(seq_along(lights) %% 3 == 0)
odds <- which(seq_along(lights) %% 2 != 0)
light_switch(11)
seq_along(lights) %% 2
seq_along(lights) % 2
??seq_along
which(n %% seq_along(lights) == 0)
light_switch(8)
which(n %% seq_along(lights) == 0)
n %% seq_along(lights)
which(n-1 %% seq_along(lights) == 0)
which(5 %% seq_along(lights) == 0)
light_switch_v2(5)
seq_along(lights)
which(n %% seq_along(lights) == 0)
n %% seq_along(lights)
seq_along(lights) %% seq_along(lights)
which(n %% seq_along(lights) == 0) # 4 0s means flips 4 times
sum(n %% seq_along(lights) == 0) # 4 0s means flips 4 times
lights <- c()
for (x in 1:n) {
lights[x] <- ifelse(sum(x %% seq_along(1:n) == 0) %% 2, F, T) # 4 0s means flips 4 times
}
lights
lights <- c()
lights <- c()
for (x in 1:n) {
lights[x] <- ifelse(sum(x %% seq_along(1:n) != 0) %% 2, F, T) # 4 0s means flips 4 times
}
lights
lights <- c()
lights
lights <- c()
for (x in 1:n) {
lights[x] <- ifelse(sum(x %% seq_along(1:n) != 0) %% 2, F, T) # 4 0s means flips 4 times
}
lights
lights <- c()
for (x in 1:n) {
lights[x] <- ifelse(sum(x %% seq_along(1:n) == 0) %% 2, F, T) # 4 0s means flips 4 times
}
lights
lights <- c()
for (x in 1:n) {
browser()
lights[x] <- ifelse(sum(x %% seq_along(1:n) == 0) %% 2, F, T) # 4 0s means flips 4 times
}
q
for (x in 1:n) {
browser()
lights[x] <- ifelse(sum(x %% seq_along(1:n) == 0) %% 2, F, T) # 4 0s means flips 4 times
}
x %% seq_along(1:n) == 0
sum(x %% seq_along(1:n) == 0)
lights <- c()
for (x in 1:n) {
browser()
lights[x] <- ifelse(2 %% sum(x %% seq_along(1:n) == 0), F, T) # 4 0s means flips 4 times
}
1 %% 2
x = 1
sum(x %% seq_along(1:n) == 0)
sum(x %% seq_along(1:n) == 0) %% 2
lights <- c()
lights <- c()
for (x in 1:n) {
#browser()
lights[x] <- ifelse(sum(x %% seq_along(1:n) == 0) %% 2 == 0, F, T) # 4 0s means flips 4 times
}
lights
light_switch(5)
light_switch_v2 <- function(n) {
lights <- c()
for (x in 1:n) {
#browser()
lights[x] <- ifelse(sum(x %% seq_along(1:n) == 0) %% 2 == 0, F, T) # 4 0s means flips 4 times
}
message(paste0("Round ", n, ":"))
print(as.logical(lights))
}
light_switch_v2(5)
light_switch(8)
light_switch_v2(8)
light_switch(10)
light_switch_v2(10)
light_switch(11)
light_switch_v2(11)
light_switch(1)
light_switch_v2(1)
lights <- 1:n
lights[ifelse(sum(x %% seq_along(1:n) == 0) %% 2 == 0, F, T)]
lights[x %% seq_along(lights) == 0]
lights[lights %% seq_along(lights) == 0]
lights %% seq_along(lights)
n %% seq_along(lights) == 0
n %% seq_along(lights)
light_switch_v2(8)
n
knitr::opts_chunk$set(echo = TRUE)
light_switch <- function(n) {
lights <- rep(F, n)
message(paste0("Round 0:"))
print(lights)
for (i in 1:n) {
for (x in seq_along(lights)) {
#browser()
if (x %% i == 0) {
lights[x] <- ifelse(isTRUE(lights[x]), F, T)
}
}
message(paste0("Round ", i, ":"))
print(lights)
}
}
light_switch_v2 <- function(n) {
lights <- c()
for (x in 1:n) {
#browser()
lights[x] <- ifelse(sum(x %% seq_along(1:n) == 0) %% 2 == 0, F, T) # 4 0s means flips 4 times
}
message(paste0("Round ", n, ":"))
print(as.logical(lights))
}
light_switch(8)
light_switch_v2(8)
n <- 8
#8; 1, 4
light_switch_v2(9)
#8; 1, 4, 9
light_switch_v2(10)
#8; 1, 4, 9
light_switch_v2(11)
#8; 1, 4, 9
light_switch_v2(12)
#8; 1, 4, 9
light_switch_v2(13)
light_switch(11)
#8; 1, 4, 9
light_switch_v2(12)
#8; 1, 4, 9
light_switch_v2(13)
#8; 1, 4, 9
light_switch_v2(14)
#8; 1, 4, 9
light_switch_v2(15)
#8; 1, 4, 9
light_switch_v2(16)
#8; 1, 4, 9, 16
light_switch_v2(17)
light_switch(17)
#8; 1, 4, 9, 16
light_switch_v2(17)
light_switch(8)
light_switch(5)
light_switch_v2(5)
light_switch(9)
light_switch_v2(9)
n <- 8
n %% seq_along(lights)
lights <- 1:n
which(n %% seq_along(lights) == 0)
lights <- 1:n
n %% seq_along(lights)
which(seq_along(lights) %% n == 0)
which(seq_along(lights) %% n+1 == 0)
seq_along(lights) %% n+1
seq_along(lights)+1
which(seq_along(lights) %% n == 0)
lights[which(seq_along(lights) %% n == 0)]
which(seq_along(lights)
%% n == 0)
which(n %% seq_along(lights) == 0)
seq_along(lights) %% n
n %% seq_along(lights)
which(n %% seq_along(lights) == 0)
lights[which(n %% seq_along(lights) == 0)]
n <- 10
lights <- 1:n
lights[which(n %% seq_along(lights) == 0)]
n <- 16
lights <- 1:n
lights[which(n %% seq_along(lights) == 0)]
#8; 1, 4, 9
light_switch_v2(16)
lights[which(n %% seq_along(lights) == 0)]
lights <- 1:n
#how many of the numbers in lights go into number
# x with no remainder, those are the ones that flip
x <- 9
which(x %% lights == 0)
ifelse(which(x %% lights == 0) %% 2 != 0), F, T)
ifelse(length(which(x %% lights == 0)) %% 2 != 0), F, T)
which(x %% lights == 0)
length(which(x %% lights == 0))
ifelse(length(which(x %% lights == 0)) %% 2 != 0, F, T)
ifelse(length(which(x %% lights == 0)) %% 2 != 0, T, F)
ifelse(length(which(lights %% lights == 0)) %% 2 != 0, T, F)
which(lights %% lights == 0)
n <- 8
lights <- 1:n
#how many of the numbers in lights go into number
# x with no remainder, those are the ones that flip
x <- 9
ifelse(length(which(lights %% lights == 0)) %% 2 != 0, T, F)
which(lights %% lights == 0)
ifelse(length(which(seq_along(lights) %% lights == 0)) %% 2 != 0, T, F)
which(seq_along(lights) %% lights == 0)
seq_along(lights) %% lights
ifelse(
length(
which(lights %% lights == 0)
) %% 2 != 0,
T,
F
)
which(lights %% lights == 0)
seq_along(lights)
lights * c(F, T)
lights * c(F, T)[lights %% 2 == 0]
