}
light_switch_v2 <- function(n) {
lights <- c()
for (x in 1:n) {
#browser()
lights[x] <- ifelse(sum(x %% seq_along(1:n) == 0) %% 2 == 0, F, T) # 4 0s means flips 4 times
}
message(paste0("Round ", n, ":"))
print(as.logical(lights))
}
light_switch(8)
light_switch_v2(8)
n <- 8
#8; 1, 4
light_switch_v2(9)
#8; 1, 4, 9
light_switch_v2(10)
#8; 1, 4, 9
light_switch_v2(11)
#8; 1, 4, 9
light_switch_v2(12)
#8; 1, 4, 9
light_switch_v2(13)
light_switch(11)
#8; 1, 4, 9
light_switch_v2(12)
#8; 1, 4, 9
light_switch_v2(13)
#8; 1, 4, 9
light_switch_v2(14)
#8; 1, 4, 9
light_switch_v2(15)
#8; 1, 4, 9
light_switch_v2(16)
#8; 1, 4, 9, 16
light_switch_v2(17)
light_switch(17)
#8; 1, 4, 9, 16
light_switch_v2(17)
light_switch(8)
light_switch(5)
light_switch_v2(5)
light_switch(9)
light_switch_v2(9)
n <- 8
n %% seq_along(lights)
lights <- 1:n
which(n %% seq_along(lights) == 0)
lights <- 1:n
n %% seq_along(lights)
which(seq_along(lights) %% n == 0)
which(seq_along(lights) %% n+1 == 0)
seq_along(lights) %% n+1
seq_along(lights)+1
which(seq_along(lights) %% n == 0)
lights[which(seq_along(lights) %% n == 0)]
which(seq_along(lights)
%% n == 0)
which(n %% seq_along(lights) == 0)
seq_along(lights) %% n
n %% seq_along(lights)
which(n %% seq_along(lights) == 0)
lights[which(n %% seq_along(lights) == 0)]
n <- 10
lights <- 1:n
lights[which(n %% seq_along(lights) == 0)]
n <- 16
lights <- 1:n
lights[which(n %% seq_along(lights) == 0)]
#8; 1, 4, 9
light_switch_v2(16)
lights[which(n %% seq_along(lights) == 0)]
lights <- 1:n
#how many of the numbers in lights go into number
# x with no remainder, those are the ones that flip
x <- 9
which(x %% lights == 0)
ifelse(which(x %% lights == 0) %% 2 != 0), F, T)
ifelse(length(which(x %% lights == 0)) %% 2 != 0), F, T)
which(x %% lights == 0)
length(which(x %% lights == 0))
ifelse(length(which(x %% lights == 0)) %% 2 != 0, F, T)
ifelse(length(which(x %% lights == 0)) %% 2 != 0, T, F)
ifelse(length(which(lights %% lights == 0)) %% 2 != 0, T, F)
which(lights %% lights == 0)
n <- 8
lights <- 1:n
#how many of the numbers in lights go into number
# x with no remainder, those are the ones that flip
x <- 9
ifelse(length(which(lights %% lights == 0)) %% 2 != 0, T, F)
which(lights %% lights == 0)
ifelse(length(which(seq_along(lights) %% lights == 0)) %% 2 != 0, T, F)
which(seq_along(lights) %% lights == 0)
seq_along(lights) %% lights
ifelse(
length(
which(lights %% lights == 0)
) %% 2 != 0,
T,
F
)
which(lights %% lights == 0)
seq_along(lights)
lights * c(F, T)
lights * c(F, T)[lights %% 2 == 0]
knitr::opts_chunk$set(echo = TRUE)
light_switch <- function(n) {
lights <- rep(F, n)
message(paste0("Round 0:"))
print(lights)
for (i in 1:n) {
for (x in seq_along(lights)) {
#browser()
if (x %% i == 0) {
lights[x] <- ifelse(isTRUE(lights[x]), F, T)
}
}
message(paste0("Round ", i, ":"))
print(lights)
}
}
light_switch_v2 <- function(n) {
lights <- c()
for (x in 1:n) {
#browser()
lights[x] <- ifelse(sum(x %% seq_along(1:n) == 0) %% 2 == 0, F, T) # 4 0s means flips 4 times
}
message(paste0("Round ", n, ":"))
print(as.logical(lights))
}
#8; 1, 4, 9, 16
light_switch_v2(25)
9/9
9/4
9/5
4/9
?rep
odds <- lights[which(lights %% 2 != 0)][-1]
lights <- 1:n
odds <- lights[which(lights %% 2 != 0)][-1]
n <- 8
lights <- 1:n
odds <- lights[which(lights %% 2 != 0)][-1]
odds <- lights[which(lights %% 2 != 0)]
which(lights %% lights == 0)
length(
which(lights %% lights == 0)
)
lights * c(F, T)
n <- 9
lights <- 1:n
#sum of prior value and next value is the index to flip
odds <- lights[which(lights %% 2 != 0)]
length(
which(lights %% lights == 0)
)
which(lights %% lights == 0)
lights*lights
#sum of prior value and next value is the index to flip
squares <- lights[which(lights*lights)]
which(lights*lights)
which(lights*lights %in% lights)
lights*lights %in% lights
lights %in% lights*lights
lights*lights
lights %in% (lights*lights)
which(lights %in% (lights*lights))
lights <- ifelse(lights %in% flip, T, F)
#sum of prior value and next value is the index to flip
flip <- lights[which(lights %in% (lights*lights))]
lights <- ifelse(lights %in% flip, T, F)
light_switch_v3 <- function(n) {
#  light_switch(9)
# 1, 2, 3, 4, 5, 6, 7, 8, 9
# 1, 2, 2, 3, 2, 4, 2, 4, 3
# flipped: 1, 4, 9
lights <- 1:n
#sum of prior value and next value is the index to flip
flip <- lights[which(lights %in% (lights*lights))]
lights <- ifelse(lights %in% flip, T, F)
## ----------------------------------------
# lights <- 1:n
#
# #how many of the numbers in lights go into number
# # x with no remainder, those are the ones that flip
# seq_along(lights)
# ifelse(
#   length(
#     which(lights %% lights == 0)
#     ) %% 2 != 0,
#   T,
#   F
# )
# lights <- lights * c(F, T)[lights %% 2 == 0]
#
# this tells me how many #s in the sequence
# go in with no remainder
#lights[which(n %% seq_along(lights) == 0)]
message(paste0("Round ", n, ":"))
print(as.logical(lights))
}
light_switch_v2(8)
light_switch_v3(8)
light_switch_v2(9)
light_switch_v3(9)
#only squares get flipped
(sqrt(lights) %% 1 == 0)
lights <- 1:n
#only squares get flipped
(sqrt(lights) %% 1 == 0)
lights <- 1:n
#only squares get flipped
lights <- (sqrt(1:n) %% 1 == 0)
message(paste0("Round ", n, ":"))
print(as.logical(lights))
sqrt(1:n)
#only squares get flipped
lights <- sqrt(1:n) %% 1 == 0
message(paste0("Round ", n, ":"))
print(as.logical(lights))
light_switch_v1 <- function(n) {
lights <- rep(F, n)
message(paste0("Round 0:"))
print(lights)
for (i in 1:n) {
for (x in seq_along(lights)) {
#browser()
if (x %% i == 0) {
lights[x] <- ifelse(isTRUE(lights[x]), F, T)
}
}
message(paste0("Round ", i, ":"))
print(lights)
}
}
light_switch_v2 <- function(n) {
lights <- c()
for (x in 1:n) {
#browser()
lights[x] <- ifelse(sum(x %% seq_along(1:n) == 0) %% 2 == 0, F, T) # 4 0s means flips 4 times
}
message(paste0("Round ", n, ":"))
print(as.logical(lights))
}
light_switch_v3 <- function(n) {
#only squares get flipped
lights <- sqrt(1:n) %% 1 == 0
message(paste0("Round ", n, ":"))
print(as.logical(lights))
}
light_switch_v1(9)
light_switch_v1(9)
light_switch_v2(9)
light_switch_v2(9)
light_switch_v3(9)
for (i in numbers) {
print(i)
}
numbers <- 1:n
for (i in numbers) {
print(i)
}
divisors <- numbers[-i]
i / seq_along(divisors)
i / seq_along(numbers)
i / seq_along(numbers) %% 1 == 0
i / seq_along(numbers) %% 1
9%%1
(i / seq_along(numbers)) %% 1
n <- 7
i = 7
(i / seq_along(numbers)) %% 1
numbers <- 1:n
for (i in numbers) {
#print(i)
results <- sum((i / seq_along(numbers)) %% 1 == 0) == 2
}
numbers <- 1:n
for (i in numbers) {
#print(i)
results[i] <- sum((i / seq_along(numbers)) %% 1 == 0) == 2
}
numbers[results]
primes <- function(n) {
numbers <- 1:n
for (i in numbers) {
results[i] <- sum((i / seq_along(numbers)) %% 1 == 0) == 2
}
return(numbers[results])
}
primes(7)
primes(11)
primes(20)
n = 5
knitr::opts_chunk$set(echo = TRUE)
sqrt(1:n)
light_switch_v3 <- function(n) {
#only squares get flipped
lights <- sqrt(1:n) %% 1 == 0
message(paste0("Round ", n, ":"))
print(as.logical(lights))
}
light_switch_v1(9)
light_switch_v2(9)
light_switch_v3(9)
light_switch_v3 <- function(n) {
#only squares get flipped
#  lights <-
sqrt(1:n) %% 1 == 0
message(paste0("Round ", n, ":"))
print(as.logical(lights))
}
light_switch_v3(9)
light_switch_v3 <- function(n) {
#only squares get flipped
#  lights <-
sqrt(1:n) %% 1 == 0
#message(paste0("Round ", n, ":"))
#print(as.logical(lights))
}
light_switch_v3(9)
light_switch_v3(25)
sqrt(1:n) %% 1 == 0
sqrt(1:n)
knitr::opts_chunk$set(echo = TRUE)
wall_heights <- c(1, 2, 4, 5, 3, 2, 1)
indices <- c(1, 3)
wall_heights[indices[1]]
wall_heights[indices[1]]:wall_heights[indices[2]]
section <- wall_heights[indices[1]:indices[2]]
indices_difference <- max(indices) - min(indices)
which(max(section))
section[which(max(section))]
max(section)
section[-max(section)]
which(section[max(section)])
max(section)
?which
section[max(section)]
which(sectino == max(section))
which(section == max(section))
section[-which(section == max(section))]
units <- sum(section[-which(section == max(section))])
water_units <- function(wall_heights, indices) {
section <- wall_heights[indices[1]:indices[2]]
units <- sum(section[-which(section == max(section))])
return(units)
}
water_units(c(1, 2, 4, 5, 3, 2, 1), c(1, 3))
section[-which(section == max(section))]
which(section == max(section))
which(section == max(section))[1]
water_units <- function(wall_heights, indices) {
section <- wall_heights[indices[1]:indices[2]]
units <- sum(section[-which(section == max(section))[1]])
return(units)
}
water_units(c(1, 2, 4, 5, 3, 2, 1), c(1, 3))
water_units(c(1, 2, 4, 5, 3, 2, 1), c(1, 4))
water_units(c(1, 2, 4, 5, 3, 2, 1), c(1, 6))
water_units(c(1, 5, 5, 5, 3, 2, 1), c(1, 4))
water_units(c(1, 2, 4, 5, 3, 2, 1), c(2, 3))
knitr::opts_chunk$set(echo = TRUE)
water_units <- function(wall_heights, indices) {
#reduce to just our indexed section
section <- wall_heights[indices[1]:indices[2]]
#remove one index of max value
units <- sum(section[-which(section == max(section))[1]])
return(units)
}
water_units(c(1, 2, 4, 5, 3, 2, 1), c(1, 3))
water_units(c(1, 2, 4, 5, 3, 2, 1), c(2, 3))
water_units(c(1, 5, 5, 5, 3, 2, 1), c(1, 4))
water_units(c(5, 1, 1, 1, 1, 1, 5), c(2, 3))
water_units(c(1, 2, 4, 5, 3, 2, 1), c(1, 3))
n <- 7
primes <- function(n) {
#create a vector of our numbers
numbers <- 1:n
#go along the numbers
for (i in numbers) {
#we only want numbers that are divisible by itself and 1
# that means we want to divide each number by every number
# in our vector, determine which ones have no remainder, there
# should be two in total - these are the primes
results[i] <- sum((i / seq_along(numbers)) %% 1 == 0) == 2
}
return(numbers[results])
}
primes(7)
n <- 7
#create a vector of our numbers
numbers <- 1:n
#go along the numbers
for (i in numbers) {
#we only want numbers that are divisible by itself and 1
# that means we want to divide each number by every number
# in our vector, determine which ones have no remainder, there
# should be two in total - these are the primes
results[i] <- sum((i / seq_along(numbers)) %% 1 == 0) == 2
}
#create a vector of our numbers
numbers <- 1:n
results <- c()
#go along the numbers
for (i in numbers) {
#we only want numbers that are divisible by itself and 1
# that means we want to divide each number by every number
# in our vector, determine which ones have no remainder, there
# should be two in total - these are the primes
results[i] <- sum((i / seq_along(numbers)) %% 1 == 0) == 2
}
return(numbers[results])
primes <- function(n) {
#create a vector of our numbers
numbers <- 1:n
results <- c()
#go along the numbers
for (i in numbers) {
#we only want numbers that are divisible by itself and 1
# that means we want to divide each number by every number
# in our vector, determine which ones have no remainder, there
# should be two in total - these are the primes
results[i] <- sum((i / seq_along(numbers)) %% 1 == 0) == 2
}
return(numbers[results])
}
primes(7)
primes(11)
primes(20)
n <- 7
primes <- function(n) {
#create a vector of our numbers
numbers <- 1:n
results <- c()
#go along the numbers
for (i in numbers) {
#we only want numbers that are divisible by itself and 1
# that means we want to divide each number by every number
# in our vector, determine which ones have no remainder, there
# should be two in total - these are the primes
results[i] <- sum((i / seq_along(numbers)) %% 1 == 0) == 2
}
return(numbers[results])
}
primes(7)
primes(7)
primes(11)
primes(20)
n <- 7
#create a vector of our numbers
numbers <- 1:n
results <- c()
#go along the numbers
for (i in numbers) {
browser()
#we only want numbers that are divisible by itself and 1
# that means we want to divide each number by every number
# in our vector, determine which ones have no remainder, there
# should be two in total - these are the primes
results[i] <- sum((i / seq_along(numbers)) %% 1 == 0) == 2
}
nuumbers
numbers
numbers
i
q
(i / seq_along(numbers)
)
i = 3
(i / seq_along(numbers)
)
sum((i / seq_along(numbers))
(i / seq_along(numbers)) %% 1 == 0
(i / seq_along(numbers)) %% 1
n <- 7
#create a vector of our numbers
numbers <- 1:n
results <- c()
#go along the numbers
for (i in numbers) {
browser()
#we only want numbers that are divisible by itself and 1
# that means we want to divide each number by every number
# in our vector, determine which ones have no remainder, there
# should be two in total - these are the primes
results[i] <- sum((i / seq_along(numbers)) %% 1 == 0) == 2
}
i
numbers
i / seq_along(numbers)
#go along the numbers
for (i in numbers) {
browser()
#we only want numbers that are divisible by itself and 1
# that means we want to divide each number by every number
# in our vector, determine which ones have no remainder, there
# should be two in total - these are the primes
results[i] <- sum((i / seq_along(numbers)) %% 1 == 0) == 2
}
seq_along(numbers)
primes(11)
primes(20)
(i / seq_along(numbers))
(i / seq_along(numbers)) %% 1
sum((i / seq_along(numbers)) %% 1 == 0)
sum((i / seq_along(numbers)) %% 1 == 0) == 2
i = 4
(i / seq_along(numbers))
(i / seq_along(numbers)) %% 1 == 0
sum((i / seq_along(numbers)) %% 1 == 0)
